#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç Verificador de SEO - Psicolog√≠a Chill√°n\n');

// Funci√≥n para leer archivos
function readFile(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    return null;
  }
}

// Funci√≥n para extraer metadata
function extractMetadata(content, filePath) {
  const issues = [];
  const suggestions = [];

  // Verificar t√≠tulo
  const titleMatch = content.match(/title:\s*['"`]([^'"`]+)['"`]/);
  if (titleMatch) {
    const title = titleMatch[1];
    if (title.length < 30) {
      issues.push(`‚ùå T√≠tulo muy corto (${title.length} caracteres): "${title}"`);
    } else if (title.length > 60) {
      issues.push(`‚ùå T√≠tulo muy largo (${title.length} caracteres): "${title}"`);
    } else {
      console.log(`‚úÖ T√≠tulo optimizado (${title.length} caracteres): "${title}"`);
    }
  }

  // Verificar descripci√≥n
  const descMatch = content.match(/description:\s*['"`]([^'"`]+)['"`]/);
  if (descMatch) {
    const description = descMatch[1];
    if (description.length < 120) {
      issues.push(`‚ùå Descripci√≥n muy corta (${description.length} caracteres)`);
    } else if (description.length > 160) {
      issues.push(`‚ùå Descripci√≥n muy larga (${description.length} caracteres)`);
    } else {
      console.log(`‚úÖ Descripci√≥n optimizada (${description.length} caracteres)`);
    }
  }

  // Verificar keywords
  const keywordsMatch = content.match(/keywords:\s*['"`]([^'"`]+)['"`]/);
  if (keywordsMatch) {
    const keywords = keywordsMatch[1];
    const keywordCount = keywords.split(',').length;
    console.log(`‚úÖ Keywords encontradas: ${keywordCount} t√©rminos`);
  } else {
    suggestions.push('üí° Considera agregar keywords espec√≠ficas');
  }

  // Verificar OpenGraph
  if (content.includes('openGraph:')) {
    console.log('‚úÖ OpenGraph configurado');
  } else {
    issues.push('‚ùå OpenGraph no configurado');
  }

  // Verificar Twitter Cards
  if (content.includes('twitter:')) {
    console.log('‚úÖ Twitter Cards configurado');
  } else {
    suggestions.push('üí° Considera agregar Twitter Cards');
  }

  // Verificar canonical
  if (content.includes('canonical')) {
    console.log('‚úÖ URL can√≥nica configurada');
  } else {
    suggestions.push('üí° Considera agregar URL can√≥nica');
  }

  return { issues, suggestions };
}

// Analizar archivos principales
console.log('üìÑ Analizando archivos de SEO...\n');

const filesToCheck = [
  { path: 'app/layout.tsx', name: 'Layout Principal' },
  { path: 'app/blog/page.tsx', name: 'P√°gina del Blog' },
  { path: 'app/blog/[slug]/page.tsx', name: 'Posts del Blog' }
];

filesToCheck.forEach(({ path: filePath, name }) => {
  console.log(`\nüîç ${name}:`);
  const content = readFile(filePath);
  
  if (!content) {
    console.log(`‚ùå Archivo no encontrado: ${filePath}`);
    return;
  }

  const { issues, suggestions } = extractMetadata(content, filePath);
  
  issues.forEach(issue => console.log(issue));
  suggestions.forEach(suggestion => console.log(suggestion));
});

// Verificar archivos de SEO t√©cnico
console.log('\n\nüîß Verificando SEO t√©cnico...\n');

const seoFiles = [
  { path: 'app/sitemap.ts', name: 'Sitemap' },
  { path: 'app/robots.ts', name: 'Robots.txt' },
  { path: 'app/manifest.ts', name: 'Web App Manifest' }
];

seoFiles.forEach(({ path: filePath, name }) => {
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${name} - Existe`);
    
    // Verificar contenido espec√≠fico
    const content = readFile(filePath);
    
    if (name === 'Sitemap' && content.includes('psicologiachillan.cl')) {
      console.log('  ‚úÖ Dominio correcto en sitemap');
    }
    
    if (name === 'Robots.txt' && content.includes('User-agent')) {
      console.log('  ‚úÖ Robots.txt configurado');
    }
    
    if (name === 'Web App Manifest' && content.includes('Psicolog√≠a')) {
      console.log('  ‚úÖ Manifest configurado');
    }
  } else {
    console.log(`‚ùå ${name} - No encontrado`);
  }
});

// Verificar structured data
console.log('\n\nüìä Verificando Structured Data...\n');

const structuredDataFiles = [
  'components/structured-data.tsx',
  'components/blog-structured-data.tsx'
];

structuredDataFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file} - Existe`);
    const content = readFile(file);
    if (content.includes('schema.org')) {
      console.log('  ‚úÖ Schema.org implementado');
    }
  } else {
    console.log(`‚ùå ${file} - No encontrado`);
  }
});

// Verificar im√°genes
console.log('\n\nüñºÔ∏è  Verificando optimizaci√≥n de im√°genes...\n');

const publicDir = 'public';
if (fs.existsSync(publicDir)) {
  const files = fs.readdirSync(publicDir);
  const images = files.filter(file => 
    /\.(webp|jpg|jpeg|png)$/i.test(file)
  );
  
  const webpImages = images.filter(img => img.toLowerCase().endsWith('.webp'));
  const webpPercentage = Math.round((webpImages.length / images.length) * 100);
  
  console.log(`üìä Total de im√°genes: ${images.length}`);
  console.log(`üéØ Im√°genes WebP: ${webpImages.length}/${images.length} (${webpPercentage}%)`);
  
  if (webpPercentage < 80) {
    console.log('‚ö†Ô∏è  Considera convertir m√°s im√°genes a WebP');
  } else {
    console.log('‚úÖ Excelente optimizaci√≥n de im√°genes');
  }
}

// Verificar next.config.mjs
console.log('\n\n‚öôÔ∏è  Verificando configuraci√≥n de Next.js...\n');

const configContent = readFile('next.config.mjs');
if (configContent) {
  console.log('‚úÖ next.config.mjs encontrado');
  
  if (configContent.includes('remotePatterns')) {
    console.log('  ‚úÖ Configuraci√≥n de im√°genes externas');
  }
  
  if (configContent.includes('compress')) {
    console.log('  ‚úÖ Compresi√≥n habilitada');
  }
  
  if (configContent.includes('headers')) {
    console.log('  ‚úÖ Headers de seguridad configurados');
  }
} else {
  console.log('‚ùå next.config.mjs no encontrado');
}

console.log('\n\nüéâ Verificaci√≥n de SEO completada!');
console.log('\nüìã Resumen:');
console.log('‚Ä¢ Revisa los ‚ùå para errores cr√≠ticos');
console.log('‚Ä¢ Considera los üí° para mejoras');
console.log('‚Ä¢ Los ‚úÖ indican configuraciones correctas');
